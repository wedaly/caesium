// Based on Lemire, Kurz, and Rupp, "Stream VByte: Faster byte-oriented integer compression."
// Information Processing Letters 130 (2018): 1-6.

use byteorder::{ByteOrder, LittleEndian, ReadBytesExt, WriteBytesExt};
use encode::EncodableError;
use std::arch::x86_64::{__m128i, _mm_loadu_si128, _mm_shuffle_epi8, _mm_storeu_si128};
use std::cmp::max;
use std::io::{Read, Write};
use std::mem::size_of;

const BLOCK_SIZE: usize = 4;
const MAX_DATA_LEN: usize = 256000000; // 256 MB, should be enough for anything we need to encode

// Data *must* be sorted ascending
pub fn delta_encode<W>(data: &[u32], writer: &mut W) -> Result<(), EncodableError>
where
    W: Write,
{
    let n = data.len();
    let num_blocks = n / BLOCK_SIZE;

    let mut ctrl_bytes = Vec::with_capacity(num_blocks);
    let mut data_bytes = Vec::with_capacity(n * size_of::<u32>());
    let mut x0 = 0;
    let mut block = [0u8; 128];
    for block_idx in 0..num_blocks {
        let i = block_idx * BLOCK_SIZE;

        let x1 = data[i];
        let x2 = data[i + 1];
        let x3 = data[i + 2];
        let x4 = data[i + 3];

        let d0 = x1 - x0;
        let d1 = x2 - x1;
        let d2 = x3 - x2;
        let d3 = x4 - x3;

        let l0 = encoded_len(d0);
        let l1 = encoded_len(d1);
        let l2 = encoded_len(d2);
        let l3 = encoded_len(d3);

        ctrl_bytes.push(encode_ctrl(l0, l1, l2, l3));
        let block_len = encode_block(d0, l0, d1, l1, d2, l2, d3, l3, &mut block);
        data_bytes.extend_from_slice(&block[..block_len]);

        x0 = x4;
    }

    for v in &data[num_blocks * BLOCK_SIZE..] {
        data_bytes.write_u32::<LittleEndian>(*v)?;
    }

    writer.write_u64::<LittleEndian>(n as u64)?;
    writer.write_all(&ctrl_bytes)?;
    writer.write_all(&data_bytes)?;

    Ok(())
}

pub fn delta_decode<R>(reader: &mut R) -> Result<Vec<u32>, EncodableError>
where
    R: Read,
{
    let n = reader.read_u64::<LittleEndian>()? as usize;
    if n > MAX_DATA_LEN {
        return Err(EncodableError::LengthTooLong(n));
    }

    let num_blocks = n / BLOCK_SIZE;
    let mut ctrl_bytes = vec![0u8; num_blocks];
    reader.read_exact(&mut ctrl_bytes)?;

    let mut x0 = 0;
    let mut result = vec![0u32; n];
    let mut buf = [0u8; BLOCK_SIZE * size_of::<u32>()];
    for (block_idx, ctrl) in ctrl_bytes.iter().enumerate() {
        let i = block_idx * BLOCK_SIZE;
        let (len, mask_bytes) = CTRL_TBL[*ctrl as usize];
        reader.read_exact(&mut buf[..len])?;

        unsafe {
            let src = _mm_loadu_si128(buf.as_ptr() as *const __m128i);
            let mask = _mm_loadu_si128(mask_bytes.as_ptr() as *const __m128i);
            let deltas = _mm_shuffle_epi8(src, mask);
            let dst = (&mut result[i..i + BLOCK_SIZE]).as_ptr() as *mut __m128i;
            _mm_storeu_si128(dst, deltas);
        }

        result[i] += x0;
        result[i + 1] += result[i];
        result[i + 2] += result[i + 1];
        result[i + 3] += result[i + 2];
        x0 = result[i + 3];
    }

    for i in num_blocks * BLOCK_SIZE..n {
        result[i] = reader.read_u32::<LittleEndian>()?;
    }

    Ok(result)
}

fn encoded_len(v: u32) -> usize {
    let num_nonzero_bytes = size_of::<u32>() - (v.leading_zeros() as usize / 8);
    max(1, num_nonzero_bytes) // at least one byte, even for value 0
}

fn encode_ctrl(l0: usize, l1: usize, l2: usize, l3: usize) -> u8 {
    // Lengths are in range [1, 4]; after subtraction the values are in [0, 3],
    // which can be represented by only two bits.
    ((l0 - 1) | (l1 - 1) << 2 | (l2 - 1) << 4 | (l3 - 1) << 6) as u8
}

fn encode_block(
    v0: u32,
    l0: usize,
    v1: u32,
    l1: usize,
    v2: u32,
    l2: usize,
    v3: u32,
    l3: usize,
    out: &mut [u8],
) -> usize {
    let mut buf = [0u8; 4];
    let mut i = 0;

    LittleEndian::write_u32(&mut buf, v0);
    for j in 0..l0 {
        out[i] = buf[j];
        i += 1;
    }

    LittleEndian::write_u32(&mut buf, v1);
    for j in 0..l1 {
        out[i] = buf[j];
        i += 1;
    }

    LittleEndian::write_u32(&mut buf, v2);
    for j in 0..l2 {
        out[i] = buf[j];
        i += 1;
    }

    LittleEndian::write_u32(&mut buf, v3);
    for j in 0..l3 {
        out[i] = buf[j];
        i += 1;
    }

    i
}

#[cfg_attr(rustfmt, rustfmt_skip)]
const CTRL_TBL: [(usize, [u8; 16]); 256] = [
    (4, [0, 128, 128, 128, 1, 128, 128, 128, 2, 128, 128, 128, 3, 128, 128, 128]),
    (5, [0, 1, 128, 128, 2, 128, 128, 128, 3, 128, 128, 128, 4, 128, 128, 128]),
    (6, [0, 1, 2, 128, 3, 128, 128, 128, 4, 128, 128, 128, 5, 128, 128, 128]),
    (7, [0, 1, 2, 3, 4, 128, 128, 128, 5, 128, 128, 128, 6, 128, 128, 128]),
    (5, [0, 128, 128, 128, 1, 2, 128, 128, 3, 128, 128, 128, 4, 128, 128, 128]),
    (6, [0, 1, 128, 128, 2, 3, 128, 128, 4, 128, 128, 128, 5, 128, 128, 128]),
    (7, [0, 1, 2, 128, 3, 4, 128, 128, 5, 128, 128, 128, 6, 128, 128, 128]),
    (8, [0, 1, 2, 3, 4, 5, 128, 128, 6, 128, 128, 128, 7, 128, 128, 128]),
    (6, [0, 128, 128, 128, 1, 2, 3, 128, 4, 128, 128, 128, 5, 128, 128, 128]),
    (7, [0, 1, 128, 128, 2, 3, 4, 128, 5, 128, 128, 128, 6, 128, 128, 128]),
    (8, [0, 1, 2, 128, 3, 4, 5, 128, 6, 128, 128, 128, 7, 128, 128, 128]),
    (9, [0, 1, 2, 3, 4, 5, 6, 128, 7, 128, 128, 128, 8, 128, 128, 128]),
    (7, [0, 128, 128, 128, 1, 2, 3, 4, 5, 128, 128, 128, 6, 128, 128, 128]),
    (8, [0, 1, 128, 128, 2, 3, 4, 5, 6, 128, 128, 128, 7, 128, 128, 128]),
    (9, [0, 1, 2, 128, 3, 4, 5, 6, 7, 128, 128, 128, 8, 128, 128, 128]),
    (10, [0, 1, 2, 3, 4, 5, 6, 7, 8, 128, 128, 128, 9, 128, 128, 128]),
    (5, [0, 128, 128, 128, 1, 128, 128, 128, 2, 3, 128, 128, 4, 128, 128, 128]),
    (6, [0, 1, 128, 128, 2, 128, 128, 128, 3, 4, 128, 128, 5, 128, 128, 128]),
    (7, [0, 1, 2, 128, 3, 128, 128, 128, 4, 5, 128, 128, 6, 128, 128, 128]),
    (8, [0, 1, 2, 3, 4, 128, 128, 128, 5, 6, 128, 128, 7, 128, 128, 128]),
    (6, [0, 128, 128, 128, 1, 2, 128, 128, 3, 4, 128, 128, 5, 128, 128, 128]),
    (7, [0, 1, 128, 128, 2, 3, 128, 128, 4, 5, 128, 128, 6, 128, 128, 128]),
    (8, [0, 1, 2, 128, 3, 4, 128, 128, 5, 6, 128, 128, 7, 128, 128, 128]),
    (9, [0, 1, 2, 3, 4, 5, 128, 128, 6, 7, 128, 128, 8, 128, 128, 128]),
    (7, [0, 128, 128, 128, 1, 2, 3, 128, 4, 5, 128, 128, 6, 128, 128, 128]),
    (8, [0, 1, 128, 128, 2, 3, 4, 128, 5, 6, 128, 128, 7, 128, 128, 128]),
    (9, [0, 1, 2, 128, 3, 4, 5, 128, 6, 7, 128, 128, 8, 128, 128, 128]),
    (10, [0, 1, 2, 3, 4, 5, 6, 128, 7, 8, 128, 128, 9, 128, 128, 128]),
    (8, [0, 128, 128, 128, 1, 2, 3, 4, 5, 6, 128, 128, 7, 128, 128, 128]),
    (9, [0, 1, 128, 128, 2, 3, 4, 5, 6, 7, 128, 128, 8, 128, 128, 128]),
    (10, [0, 1, 2, 128, 3, 4, 5, 6, 7, 8, 128, 128, 9, 128, 128, 128]),
    (11, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 128, 128, 10, 128, 128, 128]),
    (6, [0, 128, 128, 128, 1, 128, 128, 128, 2, 3, 4, 128, 5, 128, 128, 128]),
    (7, [0, 1, 128, 128, 2, 128, 128, 128, 3, 4, 5, 128, 6, 128, 128, 128]),
    (8, [0, 1, 2, 128, 3, 128, 128, 128, 4, 5, 6, 128, 7, 128, 128, 128]),
    (9, [0, 1, 2, 3, 4, 128, 128, 128, 5, 6, 7, 128, 8, 128, 128, 128]),
    (7, [0, 128, 128, 128, 1, 2, 128, 128, 3, 4, 5, 128, 6, 128, 128, 128]),
    (8, [0, 1, 128, 128, 2, 3, 128, 128, 4, 5, 6, 128, 7, 128, 128, 128]),
    (9, [0, 1, 2, 128, 3, 4, 128, 128, 5, 6, 7, 128, 8, 128, 128, 128]),
    (10, [0, 1, 2, 3, 4, 5, 128, 128, 6, 7, 8, 128, 9, 128, 128, 128]),
    (8, [0, 128, 128, 128, 1, 2, 3, 128, 4, 5, 6, 128, 7, 128, 128, 128]),
    (9, [0, 1, 128, 128, 2, 3, 4, 128, 5, 6, 7, 128, 8, 128, 128, 128]),
    (10, [0, 1, 2, 128, 3, 4, 5, 128, 6, 7, 8, 128, 9, 128, 128, 128]),
    (11, [0, 1, 2, 3, 4, 5, 6, 128, 7, 8, 9, 128, 10, 128, 128, 128]),
    (9, [0, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 128, 8, 128, 128, 128]),
    (10, [0, 1, 128, 128, 2, 3, 4, 5, 6, 7, 8, 128, 9, 128, 128, 128]),
    (11, [0, 1, 2, 128, 3, 4, 5, 6, 7, 8, 9, 128, 10, 128, 128, 128]),
    (12, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 128, 11, 128, 128, 128]),
    (7, [0, 128, 128, 128, 1, 128, 128, 128, 2, 3, 4, 5, 6, 128, 128, 128]),
    (8, [0, 1, 128, 128, 2, 128, 128, 128, 3, 4, 5, 6, 7, 128, 128, 128]),
    (9, [0, 1, 2, 128, 3, 128, 128, 128, 4, 5, 6, 7, 8, 128, 128, 128]),
    (10, [0, 1, 2, 3, 4, 128, 128, 128, 5, 6, 7, 8, 9, 128, 128, 128]),
    (8, [0, 128, 128, 128, 1, 2, 128, 128, 3, 4, 5, 6, 7, 128, 128, 128]),
    (9, [0, 1, 128, 128, 2, 3, 128, 128, 4, 5, 6, 7, 8, 128, 128, 128]),
    (10, [0, 1, 2, 128, 3, 4, 128, 128, 5, 6, 7, 8, 9, 128, 128, 128]),
    (11, [0, 1, 2, 3, 4, 5, 128, 128, 6, 7, 8, 9, 10, 128, 128, 128]),
    (9, [0, 128, 128, 128, 1, 2, 3, 128, 4, 5, 6, 7, 8, 128, 128, 128]),
    (10, [0, 1, 128, 128, 2, 3, 4, 128, 5, 6, 7, 8, 9, 128, 128, 128]),
    (11, [0, 1, 2, 128, 3, 4, 5, 128, 6, 7, 8, 9, 10, 128, 128, 128]),
    (12, [0, 1, 2, 3, 4, 5, 6, 128, 7, 8, 9, 10, 11, 128, 128, 128]),
    (10, [0, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 128, 128, 128]),
    (11, [0, 1, 128, 128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 128, 128, 128]),
    (12, [0, 1, 2, 128, 3, 4, 5, 6, 7, 8, 9, 10, 11, 128, 128, 128]),
    (13, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 128, 128, 128]),
    (5, [0, 128, 128, 128, 1, 128, 128, 128, 2, 128, 128, 128, 3, 4, 128, 128]),
    (6, [0, 1, 128, 128, 2, 128, 128, 128, 3, 128, 128, 128, 4, 5, 128, 128]),
    (7, [0, 1, 2, 128, 3, 128, 128, 128, 4, 128, 128, 128, 5, 6, 128, 128]),
    (8, [0, 1, 2, 3, 4, 128, 128, 128, 5, 128, 128, 128, 6, 7, 128, 128]),
    (6, [0, 128, 128, 128, 1, 2, 128, 128, 3, 128, 128, 128, 4, 5, 128, 128]),
    (7, [0, 1, 128, 128, 2, 3, 128, 128, 4, 128, 128, 128, 5, 6, 128, 128]),
    (8, [0, 1, 2, 128, 3, 4, 128, 128, 5, 128, 128, 128, 6, 7, 128, 128]),
    (9, [0, 1, 2, 3, 4, 5, 128, 128, 6, 128, 128, 128, 7, 8, 128, 128]),
    (7, [0, 128, 128, 128, 1, 2, 3, 128, 4, 128, 128, 128, 5, 6, 128, 128]),
    (8, [0, 1, 128, 128, 2, 3, 4, 128, 5, 128, 128, 128, 6, 7, 128, 128]),
    (9, [0, 1, 2, 128, 3, 4, 5, 128, 6, 128, 128, 128, 7, 8, 128, 128]),
    (10, [0, 1, 2, 3, 4, 5, 6, 128, 7, 128, 128, 128, 8, 9, 128, 128]),
    (8, [0, 128, 128, 128, 1, 2, 3, 4, 5, 128, 128, 128, 6, 7, 128, 128]),
    (9, [0, 1, 128, 128, 2, 3, 4, 5, 6, 128, 128, 128, 7, 8, 128, 128]),
    (10, [0, 1, 2, 128, 3, 4, 5, 6, 7, 128, 128, 128, 8, 9, 128, 128]),
    (11, [0, 1, 2, 3, 4, 5, 6, 7, 8, 128, 128, 128, 9, 10, 128, 128]),
    (6, [0, 128, 128, 128, 1, 128, 128, 128, 2, 3, 128, 128, 4, 5, 128, 128]),
    (7, [0, 1, 128, 128, 2, 128, 128, 128, 3, 4, 128, 128, 5, 6, 128, 128]),
    (8, [0, 1, 2, 128, 3, 128, 128, 128, 4, 5, 128, 128, 6, 7, 128, 128]),
    (9, [0, 1, 2, 3, 4, 128, 128, 128, 5, 6, 128, 128, 7, 8, 128, 128]),
    (7, [0, 128, 128, 128, 1, 2, 128, 128, 3, 4, 128, 128, 5, 6, 128, 128]),
    (8, [0, 1, 128, 128, 2, 3, 128, 128, 4, 5, 128, 128, 6, 7, 128, 128]),
    (9, [0, 1, 2, 128, 3, 4, 128, 128, 5, 6, 128, 128, 7, 8, 128, 128]),
    (10, [0, 1, 2, 3, 4, 5, 128, 128, 6, 7, 128, 128, 8, 9, 128, 128]),
    (8, [0, 128, 128, 128, 1, 2, 3, 128, 4, 5, 128, 128, 6, 7, 128, 128]),
    (9, [0, 1, 128, 128, 2, 3, 4, 128, 5, 6, 128, 128, 7, 8, 128, 128]),
    (10, [0, 1, 2, 128, 3, 4, 5, 128, 6, 7, 128, 128, 8, 9, 128, 128]),
    (11, [0, 1, 2, 3, 4, 5, 6, 128, 7, 8, 128, 128, 9, 10, 128, 128]),
    (9, [0, 128, 128, 128, 1, 2, 3, 4, 5, 6, 128, 128, 7, 8, 128, 128]),
    (10, [0, 1, 128, 128, 2, 3, 4, 5, 6, 7, 128, 128, 8, 9, 128, 128]),
    (11, [0, 1, 2, 128, 3, 4, 5, 6, 7, 8, 128, 128, 9, 10, 128, 128]),
    (12, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 128, 128, 10, 11, 128, 128]),
    (7, [0, 128, 128, 128, 1, 128, 128, 128, 2, 3, 4, 128, 5, 6, 128, 128]),
    (8, [0, 1, 128, 128, 2, 128, 128, 128, 3, 4, 5, 128, 6, 7, 128, 128]),
    (9, [0, 1, 2, 128, 3, 128, 128, 128, 4, 5, 6, 128, 7, 8, 128, 128]),
    (10, [0, 1, 2, 3, 4, 128, 128, 128, 5, 6, 7, 128, 8, 9, 128, 128]),
    (8, [0, 128, 128, 128, 1, 2, 128, 128, 3, 4, 5, 128, 6, 7, 128, 128]),
    (9, [0, 1, 128, 128, 2, 3, 128, 128, 4, 5, 6, 128, 7, 8, 128, 128]),
    (10, [0, 1, 2, 128, 3, 4, 128, 128, 5, 6, 7, 128, 8, 9, 128, 128]),
    (11, [0, 1, 2, 3, 4, 5, 128, 128, 6, 7, 8, 128, 9, 10, 128, 128]),
    (9, [0, 128, 128, 128, 1, 2, 3, 128, 4, 5, 6, 128, 7, 8, 128, 128]),
    (10, [0, 1, 128, 128, 2, 3, 4, 128, 5, 6, 7, 128, 8, 9, 128, 128]),
    (11, [0, 1, 2, 128, 3, 4, 5, 128, 6, 7, 8, 128, 9, 10, 128, 128]),
    (12, [0, 1, 2, 3, 4, 5, 6, 128, 7, 8, 9, 128, 10, 11, 128, 128]),
    (10, [0, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 128, 8, 9, 128, 128]),
    (11, [0, 1, 128, 128, 2, 3, 4, 5, 6, 7, 8, 128, 9, 10, 128, 128]),
    (12, [0, 1, 2, 128, 3, 4, 5, 6, 7, 8, 9, 128, 10, 11, 128, 128]),
    (13, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 128, 11, 12, 128, 128]),
    (8, [0, 128, 128, 128, 1, 128, 128, 128, 2, 3, 4, 5, 6, 7, 128, 128]),
    (9, [0, 1, 128, 128, 2, 128, 128, 128, 3, 4, 5, 6, 7, 8, 128, 128]),
    (10, [0, 1, 2, 128, 3, 128, 128, 128, 4, 5, 6, 7, 8, 9, 128, 128]),
    (11, [0, 1, 2, 3, 4, 128, 128, 128, 5, 6, 7, 8, 9, 10, 128, 128]),
    (9, [0, 128, 128, 128, 1, 2, 128, 128, 3, 4, 5, 6, 7, 8, 128, 128]),
    (10, [0, 1, 128, 128, 2, 3, 128, 128, 4, 5, 6, 7, 8, 9, 128, 128]),
    (11, [0, 1, 2, 128, 3, 4, 128, 128, 5, 6, 7, 8, 9, 10, 128, 128]),
    (12, [0, 1, 2, 3, 4, 5, 128, 128, 6, 7, 8, 9, 10, 11, 128, 128]),
    (10, [0, 128, 128, 128, 1, 2, 3, 128, 4, 5, 6, 7, 8, 9, 128, 128]),
    (11, [0, 1, 128, 128, 2, 3, 4, 128, 5, 6, 7, 8, 9, 10, 128, 128]),
    (12, [0, 1, 2, 128, 3, 4, 5, 128, 6, 7, 8, 9, 10, 11, 128, 128]),
    (13, [0, 1, 2, 3, 4, 5, 6, 128, 7, 8, 9, 10, 11, 12, 128, 128]),
    (11, [0, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 128, 128]),
    (12, [0, 1, 128, 128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 128, 128]),
    (13, [0, 1, 2, 128, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 128, 128]),
    (14, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 128, 128]),
    (6, [0, 128, 128, 128, 1, 128, 128, 128, 2, 128, 128, 128, 3, 4, 5, 128]),
    (7, [0, 1, 128, 128, 2, 128, 128, 128, 3, 128, 128, 128, 4, 5, 6, 128]),
    (8, [0, 1, 2, 128, 3, 128, 128, 128, 4, 128, 128, 128, 5, 6, 7, 128]),
    (9, [0, 1, 2, 3, 4, 128, 128, 128, 5, 128, 128, 128, 6, 7, 8, 128]),
    (7, [0, 128, 128, 128, 1, 2, 128, 128, 3, 128, 128, 128, 4, 5, 6, 128]),
    (8, [0, 1, 128, 128, 2, 3, 128, 128, 4, 128, 128, 128, 5, 6, 7, 128]),
    (9, [0, 1, 2, 128, 3, 4, 128, 128, 5, 128, 128, 128, 6, 7, 8, 128]),
    (10, [0, 1, 2, 3, 4, 5, 128, 128, 6, 128, 128, 128, 7, 8, 9, 128]),
    (8, [0, 128, 128, 128, 1, 2, 3, 128, 4, 128, 128, 128, 5, 6, 7, 128]),
    (9, [0, 1, 128, 128, 2, 3, 4, 128, 5, 128, 128, 128, 6, 7, 8, 128]),
    (10, [0, 1, 2, 128, 3, 4, 5, 128, 6, 128, 128, 128, 7, 8, 9, 128]),
    (11, [0, 1, 2, 3, 4, 5, 6, 128, 7, 128, 128, 128, 8, 9, 10, 128]),
    (9, [0, 128, 128, 128, 1, 2, 3, 4, 5, 128, 128, 128, 6, 7, 8, 128]),
    (10, [0, 1, 128, 128, 2, 3, 4, 5, 6, 128, 128, 128, 7, 8, 9, 128]),
    (11, [0, 1, 2, 128, 3, 4, 5, 6, 7, 128, 128, 128, 8, 9, 10, 128]),
    (12, [0, 1, 2, 3, 4, 5, 6, 7, 8, 128, 128, 128, 9, 10, 11, 128]),
    (7, [0, 128, 128, 128, 1, 128, 128, 128, 2, 3, 128, 128, 4, 5, 6, 128]),
    (8, [0, 1, 128, 128, 2, 128, 128, 128, 3, 4, 128, 128, 5, 6, 7, 128]),
    (9, [0, 1, 2, 128, 3, 128, 128, 128, 4, 5, 128, 128, 6, 7, 8, 128]),
    (10, [0, 1, 2, 3, 4, 128, 128, 128, 5, 6, 128, 128, 7, 8, 9, 128]),
    (8, [0, 128, 128, 128, 1, 2, 128, 128, 3, 4, 128, 128, 5, 6, 7, 128]),
    (9, [0, 1, 128, 128, 2, 3, 128, 128, 4, 5, 128, 128, 6, 7, 8, 128]),
    (10, [0, 1, 2, 128, 3, 4, 128, 128, 5, 6, 128, 128, 7, 8, 9, 128]),
    (11, [0, 1, 2, 3, 4, 5, 128, 128, 6, 7, 128, 128, 8, 9, 10, 128]),
    (9, [0, 128, 128, 128, 1, 2, 3, 128, 4, 5, 128, 128, 6, 7, 8, 128]),
    (10, [0, 1, 128, 128, 2, 3, 4, 128, 5, 6, 128, 128, 7, 8, 9, 128]),
    (11, [0, 1, 2, 128, 3, 4, 5, 128, 6, 7, 128, 128, 8, 9, 10, 128]),
    (12, [0, 1, 2, 3, 4, 5, 6, 128, 7, 8, 128, 128, 9, 10, 11, 128]),
    (10, [0, 128, 128, 128, 1, 2, 3, 4, 5, 6, 128, 128, 7, 8, 9, 128]),
    (11, [0, 1, 128, 128, 2, 3, 4, 5, 6, 7, 128, 128, 8, 9, 10, 128]),
    (12, [0, 1, 2, 128, 3, 4, 5, 6, 7, 8, 128, 128, 9, 10, 11, 128]),
    (13, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 128, 128, 10, 11, 12, 128]),
    (8, [0, 128, 128, 128, 1, 128, 128, 128, 2, 3, 4, 128, 5, 6, 7, 128]),
    (9, [0, 1, 128, 128, 2, 128, 128, 128, 3, 4, 5, 128, 6, 7, 8, 128]),
    (10, [0, 1, 2, 128, 3, 128, 128, 128, 4, 5, 6, 128, 7, 8, 9, 128]),
    (11, [0, 1, 2, 3, 4, 128, 128, 128, 5, 6, 7, 128, 8, 9, 10, 128]),
    (9, [0, 128, 128, 128, 1, 2, 128, 128, 3, 4, 5, 128, 6, 7, 8, 128]),
    (10, [0, 1, 128, 128, 2, 3, 128, 128, 4, 5, 6, 128, 7, 8, 9, 128]),
    (11, [0, 1, 2, 128, 3, 4, 128, 128, 5, 6, 7, 128, 8, 9, 10, 128]),
    (12, [0, 1, 2, 3, 4, 5, 128, 128, 6, 7, 8, 128, 9, 10, 11, 128]),
    (10, [0, 128, 128, 128, 1, 2, 3, 128, 4, 5, 6, 128, 7, 8, 9, 128]),
    (11, [0, 1, 128, 128, 2, 3, 4, 128, 5, 6, 7, 128, 8, 9, 10, 128]),
    (12, [0, 1, 2, 128, 3, 4, 5, 128, 6, 7, 8, 128, 9, 10, 11, 128]),
    (13, [0, 1, 2, 3, 4, 5, 6, 128, 7, 8, 9, 128, 10, 11, 12, 128]),
    (11, [0, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 128, 8, 9, 10, 128]),
    (12, [0, 1, 128, 128, 2, 3, 4, 5, 6, 7, 8, 128, 9, 10, 11, 128]),
    (13, [0, 1, 2, 128, 3, 4, 5, 6, 7, 8, 9, 128, 10, 11, 12, 128]),
    (14, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 128, 11, 12, 13, 128]),
    (9, [0, 128, 128, 128, 1, 128, 128, 128, 2, 3, 4, 5, 6, 7, 8, 128]),
    (10, [0, 1, 128, 128, 2, 128, 128, 128, 3, 4, 5, 6, 7, 8, 9, 128]),
    (11, [0, 1, 2, 128, 3, 128, 128, 128, 4, 5, 6, 7, 8, 9, 10, 128]),
    (12, [0, 1, 2, 3, 4, 128, 128, 128, 5, 6, 7, 8, 9, 10, 11, 128]),
    (10, [0, 128, 128, 128, 1, 2, 128, 128, 3, 4, 5, 6, 7, 8, 9, 128]),
    (11, [0, 1, 128, 128, 2, 3, 128, 128, 4, 5, 6, 7, 8, 9, 10, 128]),
    (12, [0, 1, 2, 128, 3, 4, 128, 128, 5, 6, 7, 8, 9, 10, 11, 128]),
    (13, [0, 1, 2, 3, 4, 5, 128, 128, 6, 7, 8, 9, 10, 11, 12, 128]),
    (11, [0, 128, 128, 128, 1, 2, 3, 128, 4, 5, 6, 7, 8, 9, 10, 128]),
    (12, [0, 1, 128, 128, 2, 3, 4, 128, 5, 6, 7, 8, 9, 10, 11, 128]),
    (13, [0, 1, 2, 128, 3, 4, 5, 128, 6, 7, 8, 9, 10, 11, 12, 128]),
    (14, [0, 1, 2, 3, 4, 5, 6, 128, 7, 8, 9, 10, 11, 12, 13, 128]),
    (12, [0, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 128]),
    (13, [0, 1, 128, 128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 128]),
    (14, [0, 1, 2, 128, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 128]),
    (15, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 128]),
    (7, [0, 128, 128, 128, 1, 128, 128, 128, 2, 128, 128, 128, 3, 4, 5, 6]),
    (8, [0, 1, 128, 128, 2, 128, 128, 128, 3, 128, 128, 128, 4, 5, 6, 7]),
    (9, [0, 1, 2, 128, 3, 128, 128, 128, 4, 128, 128, 128, 5, 6, 7, 8]),
    (10, [0, 1, 2, 3, 4, 128, 128, 128, 5, 128, 128, 128, 6, 7, 8, 9]),
    (8, [0, 128, 128, 128, 1, 2, 128, 128, 3, 128, 128, 128, 4, 5, 6, 7]),
    (9, [0, 1, 128, 128, 2, 3, 128, 128, 4, 128, 128, 128, 5, 6, 7, 8]),
    (10, [0, 1, 2, 128, 3, 4, 128, 128, 5, 128, 128, 128, 6, 7, 8, 9]),
    (11, [0, 1, 2, 3, 4, 5, 128, 128, 6, 128, 128, 128, 7, 8, 9, 10]),
    (9, [0, 128, 128, 128, 1, 2, 3, 128, 4, 128, 128, 128, 5, 6, 7, 8]),
    (10, [0, 1, 128, 128, 2, 3, 4, 128, 5, 128, 128, 128, 6, 7, 8, 9]),
    (11, [0, 1, 2, 128, 3, 4, 5, 128, 6, 128, 128, 128, 7, 8, 9, 10]),
    (12, [0, 1, 2, 3, 4, 5, 6, 128, 7, 128, 128, 128, 8, 9, 10, 11]),
    (10, [0, 128, 128, 128, 1, 2, 3, 4, 5, 128, 128, 128, 6, 7, 8, 9]),
    (11, [0, 1, 128, 128, 2, 3, 4, 5, 6, 128, 128, 128, 7, 8, 9, 10]),
    (12, [0, 1, 2, 128, 3, 4, 5, 6, 7, 128, 128, 128, 8, 9, 10, 11]),
    (13, [0, 1, 2, 3, 4, 5, 6, 7, 8, 128, 128, 128, 9, 10, 11, 12]),
    (8, [0, 128, 128, 128, 1, 128, 128, 128, 2, 3, 128, 128, 4, 5, 6, 7]),
    (9, [0, 1, 128, 128, 2, 128, 128, 128, 3, 4, 128, 128, 5, 6, 7, 8]),
    (10, [0, 1, 2, 128, 3, 128, 128, 128, 4, 5, 128, 128, 6, 7, 8, 9]),
    (11, [0, 1, 2, 3, 4, 128, 128, 128, 5, 6, 128, 128, 7, 8, 9, 10]),
    (9, [0, 128, 128, 128, 1, 2, 128, 128, 3, 4, 128, 128, 5, 6, 7, 8]),
    (10, [0, 1, 128, 128, 2, 3, 128, 128, 4, 5, 128, 128, 6, 7, 8, 9]),
    (11, [0, 1, 2, 128, 3, 4, 128, 128, 5, 6, 128, 128, 7, 8, 9, 10]),
    (12, [0, 1, 2, 3, 4, 5, 128, 128, 6, 7, 128, 128, 8, 9, 10, 11]),
    (10, [0, 128, 128, 128, 1, 2, 3, 128, 4, 5, 128, 128, 6, 7, 8, 9]),
    (11, [0, 1, 128, 128, 2, 3, 4, 128, 5, 6, 128, 128, 7, 8, 9, 10]),
    (12, [0, 1, 2, 128, 3, 4, 5, 128, 6, 7, 128, 128, 8, 9, 10, 11]),
    (13, [0, 1, 2, 3, 4, 5, 6, 128, 7, 8, 128, 128, 9, 10, 11, 12]),
    (11, [0, 128, 128, 128, 1, 2, 3, 4, 5, 6, 128, 128, 7, 8, 9, 10]),
    (12, [0, 1, 128, 128, 2, 3, 4, 5, 6, 7, 128, 128, 8, 9, 10, 11]),
    (13, [0, 1, 2, 128, 3, 4, 5, 6, 7, 8, 128, 128, 9, 10, 11, 12]),
    (14, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 128, 128, 10, 11, 12, 13]),
    (9, [0, 128, 128, 128, 1, 128, 128, 128, 2, 3, 4, 128, 5, 6, 7, 8]),
    (10, [0, 1, 128, 128, 2, 128, 128, 128, 3, 4, 5, 128, 6, 7, 8, 9]),
    (11, [0, 1, 2, 128, 3, 128, 128, 128, 4, 5, 6, 128, 7, 8, 9, 10]),
    (12, [0, 1, 2, 3, 4, 128, 128, 128, 5, 6, 7, 128, 8, 9, 10, 11]),
    (10, [0, 128, 128, 128, 1, 2, 128, 128, 3, 4, 5, 128, 6, 7, 8, 9]),
    (11, [0, 1, 128, 128, 2, 3, 128, 128, 4, 5, 6, 128, 7, 8, 9, 10]),
    (12, [0, 1, 2, 128, 3, 4, 128, 128, 5, 6, 7, 128, 8, 9, 10, 11]),
    (13, [0, 1, 2, 3, 4, 5, 128, 128, 6, 7, 8, 128, 9, 10, 11, 12]),
    (11, [0, 128, 128, 128, 1, 2, 3, 128, 4, 5, 6, 128, 7, 8, 9, 10]),
    (12, [0, 1, 128, 128, 2, 3, 4, 128, 5, 6, 7, 128, 8, 9, 10, 11]),
    (13, [0, 1, 2, 128, 3, 4, 5, 128, 6, 7, 8, 128, 9, 10, 11, 12]),
    (14, [0, 1, 2, 3, 4, 5, 6, 128, 7, 8, 9, 128, 10, 11, 12, 13]),
    (12, [0, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 128, 8, 9, 10, 11]),
    (13, [0, 1, 128, 128, 2, 3, 4, 5, 6, 7, 8, 128, 9, 10, 11, 12]),
    (14, [0, 1, 2, 128, 3, 4, 5, 6, 7, 8, 9, 128, 10, 11, 12, 13]),
    (15, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 128, 11, 12, 13, 14]),
    (10, [0, 128, 128, 128, 1, 128, 128, 128, 2, 3, 4, 5, 6, 7, 8, 9]),
    (11, [0, 1, 128, 128, 2, 128, 128, 128, 3, 4, 5, 6, 7, 8, 9, 10]),
    (12, [0, 1, 2, 128, 3, 128, 128, 128, 4, 5, 6, 7, 8, 9, 10, 11]),
    (13, [0, 1, 2, 3, 4, 128, 128, 128, 5, 6, 7, 8, 9, 10, 11, 12]),
    (11, [0, 128, 128, 128, 1, 2, 128, 128, 3, 4, 5, 6, 7, 8, 9, 10]),
    (12, [0, 1, 128, 128, 2, 3, 128, 128, 4, 5, 6, 7, 8, 9, 10, 11]),
    (13, [0, 1, 2, 128, 3, 4, 128, 128, 5, 6, 7, 8, 9, 10, 11, 12]),
    (14, [0, 1, 2, 3, 4, 5, 128, 128, 6, 7, 8, 9, 10, 11, 12, 13]),
    (12, [0, 128, 128, 128, 1, 2, 3, 128, 4, 5, 6, 7, 8, 9, 10, 11]),
    (13, [0, 1, 128, 128, 2, 3, 4, 128, 5, 6, 7, 8, 9, 10, 11, 12]),
    (14, [0, 1, 2, 128, 3, 4, 5, 128, 6, 7, 8, 9, 10, 11, 12, 13]),
    (15, [0, 1, 2, 3, 4, 5, 6, 128, 7, 8, 9, 10, 11, 12, 13, 14]),
    (13, [0, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
    (14, [0, 1, 128, 128, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]),
    (15, [0, 1, 2, 128, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]),
    (16, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
];

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_encodes_and_decodes_empty() {
        let data = Vec::<u32>::new();
        assert_encodes_and_decodes(&data);
    }

    #[test]
    fn it_encodes_and_decodes_different_lengths() {
        let data: Vec<u32> = (0..32).map(|x| (1 << x) as u32).collect();
        assert_encodes_and_decodes(&data);
    }

    #[test]
    fn it_encodes_and_decodes_leftover_values() {
        for n in 4..8 {
            let data: Vec<u32> = (0..n).map(|n| (n * 2) as u32).collect();
            assert_encodes_and_decodes(&data);
        }
    }

    #[test]
    fn it_encodes_and_decodes_every_length_permutation() {
        for l0 in 0..4 {
            for l1 in 0..4 {
                for l2 in 0..4 {
                    for l3 in 0..4 {
                        let d0 = (1 << (l0 * 8)) - 1;
                        let d1 = (1 << (l1 * 8)) - 1;
                        let d2 = (1 << (l2 * 8)) - 1;
                        let d3 = (1 << (l3 * 8)) - 1;

                        let x1 = d0;
                        let x2 = x1 + d1;
                        let x3 = x2 + d2;
                        let x4 = x3 + d3;

                        let data = vec![x1, x2, x3, x4];
                        assert_encodes_and_decodes(&data);
                    }
                }
            }
        }
    }

    fn assert_encodes_and_decodes(data: &[u32]) {
        let mut buf = Vec::<u8>::new();
        delta_encode(&data, &mut buf).expect("Could not encode data vec");
        let decoded = delta_decode(&mut &buf[..]).expect("Could not decode data vec");
        assert_eq!(decoded, data);
    }
}
